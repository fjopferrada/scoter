* Tasks
** DONE 001 Look at namedtuple for configuration parameters
   CLOSED: [2013-11-17 Sun 10:25]
** DONE 002 Fix the multiply-inverting y-axes
   CLOSED: [2013-11-08 Fri 21:55]
** TODO 003 Better handling for non-equal-length series
   Currently bombs out with an error. Should catch the error
   and present it to the user via the GUI.
** TODO 004 Tidy up live SA plot code a bit
** TODO 005 Idea for improving the SA scheduler
   In the adaptive scheduler, a temperature step can be terminated either (2)
   by clocking a certain number of accepted changes or (as a fallback when
   improvements are impossible) (2) by going through a certain number of
   iterations. The termination condition is actually valuable information! If
   (2) occurs, there's an implication that we're in a local minimum --
   perhaps this means we can increase the cooling rate. Vice versa may also
   apply, but need to think about it carefully: what if it's just a
   metastable state where we're continually hopping between the same few
   solutions?

   Need more of these ‘self-steering’ adaptations so users don't need
   to manually tweak a bunch of incomprehensible simulated annealing
   parameters for each new dataset.
** DONE 006 Store user preferences using wx.Config API
   CLOSED: [2013-11-17 Sun 10:24]
** DONE 007 Add an interface to the Match program
   CLOSED: [2013-12-02 Mon 11:12]
*** DONE Proof-of-concept implementation
    CLOSED: [2013-11-28 Thu 18:55]
*** DONE Clean up the interface code
    CLOSED: [2013-12-02 Mon 11:12]
*** DONE Configure Match from GUI settings panel
    CLOSED: [2013-12-02 Mon 11:12]
** DONE 008 Add SA configuration options to correlation pane
   CLOSED: [2013-11-22 Fri 09:56]
** DONE 009 Add SA parameters to Scoter arguments
   CLOSED: [2013-11-22 Fri 09:56]
   Random seed, start/end temperatures, cooling rate, thresholds, rate
   change penalty, ... hopefully at least some of these will become
   irrelevant or automatically configurable in time, but for now they should
   at least not be baked into the code.
** DONE 010 ScoterGui.quit() not called on window closing
   CLOSED: [2013-11-17 Sun 10:36]
   The application quits when the window closes, but quit() is
   only called if the application is terminated via the Quit menu
   item. So any required housekeeping in quit() is not guaranteed
   to be called. At the moment, said housekeeping consists of saving
   the current parameters via the wx.Config API.

** DONE 011 Add settings import/export feature
   CLOSED: [2014-01-17 Fri 14:37]
   The user should be able to save the entire state of the Scoter
   ‘workspace’ (including data sources, preprocessing, and
   correlation configuration) to a file and reload it to restore
   the state.
** DONE 012 Add ‘reset configuration’ button
   CLOSED: [2014-01-17 Fri 14:41]
   An essential complement to a configuration that persists across
   restarts of the program!
** TODO 013 Make progress bar work correctly
   Currently the progress bar only shows realistic progress if the
   final temperature is 1.

** TODO 014 Add a plot-based GUI to truncate series
   The current design, with truncation text entry boxes in the
   preprocessing tab, is a little clunky: it would be better to
   have the truncation options in the data-series tabs with
   the graphs, with a hook into matplotlib to allow the user to
   select the truncation points graphically.

** TODO 015 First proto-draft of manual
   No sense in fleshing it out fully until the program's complete, but I need
   a skeleton in place into which I can drop snippets as they occur to me.
   Growing the manual slowly from a "hello world" will also make it easier to
   debug any asciidoc problems.

** TODO 016 Separate nblocks parameters for SA and Match
** TODO 017 Match graphs don't always update after run
   To reproduce: start program, run correlation, switch to Match results tab,
   observe that plots are blank. Resize window and graphs appear. NB does
   not manifest itself when scotergui is run in debug mode.
** DONE 018 Use Scoter defaults as wx.Config defaults
   CLOSED: [2013-12-03 Tue 10:44]
   Currently, ScoterConfig has hardcoded defaults for any missing
   arguments to its constructor. However, ScoterGui uses its own
   hardcoded defaults when creating a ScoterConfig using
   wx.Config! ScoterGui should instantiate a default ScoterConfig
   without arguments, and use its field values in 
   read_params_from_wxconfig.
** DONE 019 Better save/load of match path in GUI
   CLOSED: [2013-12-04 Wed 10:24]
** DONE 020 Rethink configuration architecture in scotergui
   CLOSED: [2013-12-07 Sat 17:45]
   A bit of a mess at the moment: scotergui reads a wx.Config
   into a ScoterConfig, but only ever uses that ScoterConfig
   to initialize the GUI. When a correlation is run, the GUI
   state is used to instantiate *another* ScoterConfig which is
   passed to the Scoter instance. There's no need to round-trip
   the initial configuration via a ScoterConfig: Scoter itself
   will never need to deal with a wx.Config -- it *will* need
   file-based configuration at some point but this should be
   based on configparser. The round-trip introduces some hackiness
   too, since the ScoterGui and Scoter configs don't map exactly
   onto each other: the Match path is specified differently.
** TODO 021 More interpolation methods
** TODO 022 Assessment of goodness of correlation
   Even if just a simple correlation coefficient between tuned
   record and target.
** TODO 023 Unequal weighting of two records in tandem
   Perhaps even dynamic? As a function of data resolution?
   That might be overkill. But at least do it at the preprocessing
   stage so that Match can also benefit.
** TODO 024 Command-line operation
   Currently the only interface to the scoter module is via scotergui. Add a
   command-line parser to scoter for non-interactive operation.
** TODO 025 ScoterGui should remember data directories
   ScoterGui's Save and Load dialogs should remember the last-used
   directory (even across restarts).
** TODO 026 Record paths are not saved in configuration
   Neither the GUI configuration nor the non-interactive Scoter
   configuration allows for saving and restoring paths to records,
   so even though the rest of the configuration is persistent,
   records need to be re-opened on every run. (In non-interactive
   mode it is currently impossible to specify records, making it
   impossible to run usefully.) Any per-record configuration (most
   obviously truncation) needs to be saved as well.
